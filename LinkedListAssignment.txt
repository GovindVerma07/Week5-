 Q1. Given a linked list and a key ‘X‘ in, the task is to check if X is present in the linked list or not.
Ans.  public static boolean isPresent(Node head, int X){
        Node temp = head;
        Node t = new Node(X);
        while(temp!=null){
            if(temp.val == t.val){
                return true;
            }
            temp = temp.next;
        }
        return false;
    }

 Q2. Insert a node at the given position in a linked list. We are given a pointer to a node, and the 
     new node is inserted after the given node.
Ans.   public static void insertAt(Node head, int loc, int data){
        Node temp = head;
        Node t = new Node(data);
        if(loc == 0){
            t.next = head;
            head = t;
            return;
        }
        for(int i = 1; i < loc-1; i++){
            temp = temp.next;
        }
        if(temp.next == null){
            temp.next = t;
        }
        t.next = temp.next;
        temp.next = t;
    }

Q3. Given the head of a sorted linked list, delete all duplicates such that each element 
    appears only once. Return the linked list sorted as well.
Ans. public ListNode deleteDuplicates(ListNode head) {
        ListNode temp = head;
        while(temp != null && temp.next != null){
            if(temp.next.val == temp.val){
                temp.next = temp.next.next;
            }
            if(temp.next == null){
                return head;
            }
            if(temp.next.val != temp.val){
                temp = temp.next;
            }
        }
         return head;
    }

Q4. Given the head of a singly linked list, return true if it is a palindrome or false otherwise.
Ans. class Solution {
     public ListNode reverse(ListNode head){
            ListNode pre = null, curr = head, after = null;
            while(curr!=null){
                after = curr.next;
                curr.next = pre;
                pre = curr;
                curr = after;
            }
            return pre;
        }
    public boolean isPalindrome(ListNode head) {
        ListNode slow = head;
        ListNode fast = head;
        while(fast.next!=null && fast.next.next!=null){
            slow = slow.next;
            fast = fast.next.next;
        }
        ListNode temp = reverse(slow.next);
        ListNode p1 = head;
        ListNode p2 = temp;
        while(p2!=null){
            if(p1.val != p2.val){
                return false;
            }
            p1 = p1.next;
            p2 = p2.next;
        }
        return true;
    }
}

Q5. Given two numbers represented by two lists, write a function that returns the sum list. The 
sum list is a list representation of the addition of two input numbers.
Ans. class LinkedList {

    static Node head1, head2;

    static class Node {

        int data;
        Node next;
        Node(int d) {
            data = d;
            next = null;
        }
    }

    void addTwoLists(Node first, Node second) {
        Node start1 = new Node(0);
        start1.next = first;
        Node start2 = new Node(0);
        start2.next = second;

        addPrecedingZeros(start1, start2);
        Node result = new Node(0);
        if (sumTwoNodes(start1.next, start2.next, result) == 1) {
            Node node = new Node(1);
            node.next = result.next;
            result.next = node;
        }
        printList(result.next);
    }

    private int sumTwoNodes(Node first, Node second, Node result) {
        if (first == null) {
            return 0;
        }
        int number = first.data + second.data + sumTwoNodes(first.next, second.next, result);
        Node node = new Node(number % 10);
        node.next = result.next;
        result.next = node;
        return number / 10;
    }
    private void addPrecedingZeros(Node start1, Node start2) {
        Node next1 = start1.next;
        Node next2 = start2.next;
        while (next1 != null && next2 != null) {
            next1 = next1.next;
            next2 = next2.next;
        }
        if (next1 == null && next2 != null) {
            while (next2 != null) {
                Node node = new Node(0);
                node.next = start1.next;
                start1.next = node;
                next2 = next2.next;
            }
        } else if (next2 == null && next1 != null) {
            while (next1 != null) {
                Node node = new Node(0);
                node.next = start2.next;
                start2.next = node;
                next1 = next1.next;
            }
        }
    }

    void printList(Node head) {
        while (head != null) {
            System.out.print(head.data + " ");
            head = head.next;
        }
        System.out.println("");
    }

    public static void main(String[] args) {
        LinkedList list = new LinkedList();

        // creating first list
        list.head1 = new Node(7);
        list.head1.next = new Node(5);
        list.head1.next.next = new Node(9);
        list.head1.next.next.next = new Node(4);
        list.head1.next.next.next.next = new Node(6);
        System.out.print("First List is ");
        list.printList(head1);

        // creating second list
        list.head2 = new Node(8);
        list.head2.next = new Node(4);
        System.out.print("Second List is ");
        list.printList(head2);

        System.out.print("Resultant List is ");
        // add the two lists and see the result
        list.addTwoLists(head1, head2);
    }
}